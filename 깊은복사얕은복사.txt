소멸자가 호출되는 경우
1. 매개변수에서 값을 복사한 경우 리턴 직후 소멸자 호출!
2. 복사한 값이 리턴되고 어떠한 곳에도 대입 되지 않는 경우 함수 종료루 소멸자 호출!

TT test(TT t)
{
	return t;
}
-복사생성자 없을 경우
에러!! 복사생성자 매개변수에서 한 번, return 할때 한 번 총 2번 호출
그러나 얕은 복사이므로 리턴되고 호출되는 소멸자에 의해 원본이 소멸되고
함수가 끝날때 호출되는 소멸자에의해 이미 소멸된 원본을 또 지우려고 할때
오류 발생!

-복사생성자 있을 경우
복사생성자 매개변수에서 한 번, return 할때 한 번 총 2번 호출
위 함수 호출 뒤 원본 객체 살아있음.
=====================================================================

TT& test(TT t)
{
	return t;
}
-복사생성자 없을 경우
에러! 복사생성자 매개변수에서 한 번 호출 그러나 얕은 복사 이다.
return 될때 복사생성자는 호출되지 않고 원본이 리턴 된다. 근데
리턴 직후 소멸자가 호출되어 원본을 지워버리고 함수 밖에서 원본 사용시
원본이 지워져 있다. (main() 종료 될때 또 지우려고 해서 오류 발생)

-복사생성자 있을 경우
복사생성자 매개변수에서 한 번 호출(깊은 복사) return 될때 깊은 복사가
이루어진 것을 return한다. 그러나 return 직후 소멸자가 호출되어
깊은 복사가 이루어진것을 지워버리므로 반환된 객체는 쓰래기값이 들어있다.
(따라서 반환 된 것을 바로 대입하여 깊은복사생성자가 일어나도록 해도 여전히 쓰래기 값이 들어있다.)
하지만 원본은 훼손되지 않고 그대로 있다.
=====================================================================

TT test(TT& t)
{
	return t;
}
-복사생성자 없을 경우
오류! 매개변수에서 복사생성자가 호출되지 않고 원본이 들어간다. 그 후
return 될때 복사생성자가 호출되어 return되고 함수종료후 소멸자가 호출되어
원본이 삭제 된다.(얕은 복사이므로 원본이 삭제됨) 함수 밖에서 다시 원본을 호출하면 쓰래기 값이 나온다.
(main()함수가 종료될때 또 지우려고 해서 오류 발생)

-복사생성자 있을 경우
매개변수에서 복사생성자가 호출되지 않고 원본이 들어간다. 그 후
return 될때 복사생성자가 호출되고 깊은 복사가 된 객체가 반환된다.
반환값은 받는 곳이 있다면 함수가 종료되도 소멸자가 호출되지 않아 
복사된 값이 보존 된다.
원본은 보존 된다.
=====================================================================

TT& test(TT& t)
{
	return t;
}
-복사생성자 없을 경우
오류! 매개변수에서 복사생성자가 호출되지 않고 원본이 들어간다. return 될
때도 복사생성자 호출없이 이루어진다. 아무것도 복사 하지 않아
소멸자도 호출되지 않는다. 일반 객체에 대입할 경우 복사생성자가 호출된다.
얕은 복사가 일어나므로 원본값을 참조하게 된다. 그러나 main()함수가 소멸될때
원본과 원본을 참조하는것 같은(&선언은아닌데) 객체가 모두 소멸자를 호출하게되어
이미 지워진것을 또 지우려하니 오류 발생!

-복사생성자 있을 경우
매개변수에서 복사생성자가 호출되지 않고 원본이 들어간다. return 될
때도 복사생성자 호출없이 이루어진다. 아무것도 복사 하지 않아
소멸자도 호출되지 않는다. 일반 객체에 대입할 경우 복사생성자가 호출된다.
깊은 복사가 일어나므로 값이 제대로 들어가 있다.
=====================================================================